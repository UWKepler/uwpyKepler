import itertools
import numpy as num

def readPipelinePars(File):
    """
    reads Pipeline Parameter Files
    """

    DataFile = open(File,'r')
    ParDict = {}
    for line in DataFile.readlines():
        if not line.startswith('#'):
            DataArray = map(str, line.split('|'))
            key = DataArray[0].strip()
            par = DataArray[1].strip('\n').strip()
            ParDict[key] = par

    return ParDict

def SortParOptions(OptionString):
    """
    Convert Option string to a list of parameters
    """
    
    List = []
    if OptionString.strip().startswith('ar'):
        Dummy_array = map(str,OptionString.split(':'))
        ANumbers = map(long,Dummy_array[1].split(','))
        try:
            List = num.arange(ANumbers[0],ANumbers[1],ANumbers[2])
        except:
            raise NameError("Bad arange number options ")
    else:
        List = map(long,OptionString.split(','))
        if not isinstance(List,list):
            List = [List]
    
    return list(set(List))

def computeNTrials(ParObject):
    """
    Given a list of pipeline parameter choices, 
    this function computes the number of key word trials.
    """
    
    NTrials = 1
    for attr in ParObject.ParList:
        NTrials *= len(getattr(ParObject,attr))
    return NTrials
    
class PipelinePars:
    """
    Class that initiates the pipeline trials
    """

    def __init__(self, FileName):
        # reading a parameter set
        ParDict = readPipelinePars(FileName)
        ParList = []
        
        # set parameter names and options as class attributes
        for key in ParDict.keys():
            if key != 'parsetName' and key != 'ctype':
                ListData = SortParOptions(ParDict[key])
                setattr(self.__class__,key,ListData)
                ParList.append(key)
            elif key == 'ctype':
                ListData = map(str,ParDict[key].split(','))
                if not isinstance(ListData,list):
                    ListData = [ListData]
                setattr(self.__class__,key,ListData)
                ParList.append(key)
            else:
                setattr(self.__class__,key,ParDict[key])
                
        # parameter Keys list
        self.ParList = ParList
        # Number of key word trials
        self.Nkw = computeNTrials(self)
    
    def Trials(self,KIDList):
        """
        This function sets up all pipeline trials using key word options
        and a List of KIDs
        """
        
        self.NKIDs = len(KIDList['KIDList'])
        UberList = KIDList
        for parName in self.ParList:
            UberList[parName] = getattr(self,parName)
        
        Trials = TrialList(UberList)
        self.NTrials = len(Trials)
        
        return Trials

def TrialList(UberList):
    """
    From a stacked list of all options returns
    a list of dictionaries that hold every possible combination
    of these options.
    """
    
    keyList = []
    InList = []
    TList = []
    for key in UberList.keys():
        if key != 'File':
            keyList.append(key)
            InList.append(UberList[key])

    ComboList = itertools.product(*InList)
    for combo in ComboList:
        TList.append(dict(zip(keyList,combo)))
    
    return TList

class keptrial:
    """
    This class is used to pass the trials generated by Pipeline 
    """
    
    def __init__(self,InDict):
        #print type(InDict['KIDList'])
        self.kid = str(InDict['KIDList'])
        del InDict['KIDList']
        self.kw = InDict
        